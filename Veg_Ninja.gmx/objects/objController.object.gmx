<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//*****************************************************************************
//
//  Veg Ninja game
//
//*****************************************************************************


// Set background
background_index[0]   = bckFruitNinja;
background_visible[0] = true;

// New game, so we reset the score &amp; lives
score = 0;
lives = global.Lives;

// Start the spawn timer and number of lives
alarm[0] = room_speed * 2;     // 2 seconds

instance_create(0, 0, objMouseTracker);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//*****************************************************************************
//
//  Veg Ninja game
//
//*****************************************************************************

if (!instance_exists(objGameOver))
{
var spawnCount, spawnMin, spawnMax, xpos, ypos, veg;
spawnCount = irandom_range(global.spawnMin, global.spawnMax);       // We want to spawn 1-3 veg
repeat (spawnCount)
    {
    xpos = random_range(100, room_width-100);   // A random x position
    ypos = room_height+100;                     // y position just under the room
    veg  = instance_create(xpos, ypos, objVeg); // Create our vegetable object
    veg.sprite_index = choose(
                sprBrocolli,
                sprCarrot,
                sprOnion,
                sprPepper,
                sprSpringOnion,
                sprPotato,
                sprCorn
                //sprTNT
                );
    if (veg.sprite_index == sprTNT)     // If the random sprite was the TNT, then animate it
        {
        veg.image_speed = 0.2;
        }
    }
alarm[0] = room_speed * global.secondsToSpawn;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the game is paused, then counter the sawn timer to stop it decreasing
if (global.pause)
{
alarm[0] += 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(objGameOver))
    {
    instance_create(room_width/2, room_height/2, objGameOver);
    }

// log valid/invalid objects sliced
var file, str;
file = file_text_open_append("Log.txt");
file_text_write_real(file, score);
file_text_write_string(file, "|");
file_text_write_real(file, global.Lives);
file_text_writeln(file);
file_text_close(file);

// send valid/invalid objects sliced to db
url = "http://104.131.21.237/";
url_route = "log"; 
dev_id = device_get_id();
DB_PASSWORD = "9aa97b27f8f9ceb45dea4a9fda84c2a0bd8759af97e82783";
var str = "id=" + dev_id + "&amp;sliced=" + string(score) + "&amp;lives=" + string(global.Lives) + "&amp;password=" + DB_PASSWORD
show_message(url + url_route +  "?" + str);    
post = http_post_string(url + url_route + "?", str);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//*****************************************************************************
//
//  Veg Ninja game
//
//*****************************************************************************

draw_set_font(fontComic);
draw_text(40, 40, "Vegetables Chopped: "+string(score));
draw_text(40, room_height-50, "Lives: "+string(lives));

if (global.pause)
{
    // Darken out the background
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_rectangle(0, 0, room_width, room_height, 0);
    
    // Reset drawing values as we don't want them to apply to further drawing
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_text(room_width/2, room_height/2, "PAUSED");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
