<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//*****************************************************************************
//
//  Veg Ninja game
//
//*****************************************************************************


// Set background
background_index[0]   = bckFruitNinja;
background_visible[0] = true;

// New game, so we reset the score &amp; lives
score = 0;
lives = global.Lives;

// Start the spawn timer and number of lives
alarm[0] = room_speed * 2;     // 2 seconds

instance_create(0, 0, objMouseTracker);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//*****************************************************************************
//
//  Veg Ninja game
//
//*****************************************************************************

if (!instance_exists(objGameOver))
{
var spawnCount, spawnMin, spawnMax, xpos, ypos, veg;
spawnCount = irandom_range(global.spawnMin, global.spawnMax);

// increase the global variable for veg spawned
global.vegSpawned += spawnCount;

repeat (spawnCount)
    {
    xpos = random_range(100, room_width-100);   // A random x position
    ypos = room_height+100;                     // y position just under the room
    veg  = instance_create(xpos, ypos, objVeg); // Create our vegetable object
    veg.sprite_index = choose(
                sprBrocolli,
                sprCarrot,
                sprOnion,
                sprPepper,
                sprSpringOnion,
                sprPotato,
                sprCorn
                //sprTNT
                );
    if (veg.sprite_index == sprTNT)     // If the random sprite was the TNT, then animate it
        {
        veg.image_speed = 0.2;
        }
    // increase global variable for bad veg spawned if bad veg found
    if (isGoodVeg(veg.sprite_index) != 1)
        {
        global.badVegSpawned += 1;
        }
    }
alarm[0] = room_speed * global.secondsToSpawn;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the game is paused, then counter the sawn timer to stop it decreasing
if (global.pause)
{
alarm[0] += 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(objGameOver))
    {
    instance_create(room_width/2, room_height/2, objGameOver);
    }

/*
// log valid/invalid objects sliced
var file, str;
file = file_text_open_append("Log.txt");
file_text_write_real(file, score);
file_text_write_string(file, "|");
file_text_write_real(file, global.Lives);
file_text_writeln(file);
file_text_close(file);
*/

// send valid/invalid objects sliced to db
url = "http://104.131.21.237/";
port = 80;
url_route = "log"; 
dev_id = device_get_id();
DB_PASSWORD = "9aa97b27f8f9ceb45dea4a9fda84c2a0bd8759af97e82783";

// What is logged?
// id (deprecated): useful with Android/iOS devices to grab a unique hardware identifier
// username: unique id for the current user in database
// sliced: how many good veg were sliced before losing all lives
// lives: how many lives were available
// password: to connect to db
// difficulty: what difficulty was selected at start of the game
// numberOfGoodVeg: how many different good veg could render randomly during the game
// numberOfBadVeg: how many different bad veg (slicing one subtracts a life) could render randomly during the game
// fallenVeg: how many good veg were not sliced (missing one subtracts a life)
// vegSpawned: how many total veg were spawned in the game
// badVegSpawned: how many total bad veg were spawned in the game
var str = "id=" + string(dev_id) + "&amp;username=" + global.username + "&amp;sliced=" + string(score) + "&amp;lives=" + string(global.Lives) + "&amp;password=" + DB_PASSWORD + "&amp;difficulty=" + global.difficulty + "&amp;numberOfGoodVeg=" + string(global.goodCount) + "&amp;numberOfBadVeg=" + string(global.badCount) + "&amp;fallenVeg=" + string(global.fallenVeg) + "&amp;vegSpawned=" + string(global.vegSpawned) + "&amp;badVegSpawned=" + string(global.badVegSpawned);

post = http_post_string(url + url_route + "?", str);



//////////
//// networking variables
//url = "104.131.21.237";
//port = 80;

//// open a network socket connection to the server
//var socket = network_create_socket(network_socket_tcp);
//var server = network_connect(socket, url, port);
//if server &lt; 0
//    {
    // TODO - write failsafe code
    // No connection!
//    }
//else
//    {
    // TODO - write http send code
    // Connected!
//    }

////// buffer /////
//var buffer = buffer_create(4096, buffer_grow, 1);
//buffer_seek(buffer, buffer_seek_start, 0);
//// initialize data to write to buffer
//dev_id = device_get_id();
//DB_PASSWORD = "9aa97b27f8f9ceb45dea4a9fda84c2a0bd8759af97e82783";
//var data = "id=" + string(dev_id) + "&amp;sliced=" + string(score) + "&amp;lives=" + string(global.Lives) + "&amp;password=" + DB_PASSWORD + "&amp;difficulty=" + global.difficulty + "&amp;numberOfGoodVeg=" + string(global.goodCount) + "&amp;numberOfBadVeg=" + string(global.badCount) + "&amp;fallenVeg=" + string(global.fallenVeg);
//// write data to buffer
///// TODO - add log? + data as data to send ??????
//buffer_write(buffer, buffer_string, data);
//// send data over the socket created, inside of buffer, for all data written up to buffer_tell's position
//network_send_packet(socket, buffer, buffer_tell(buffer));


///////////////////////////
//// clean up buffer
//buffer_delete(buffer);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//*****************************************************************************
//
//  Veg Ninja game
//
//*****************************************************************************

draw_set_font(fontComic);
draw_text(40, 40, "Vegetables Chopped: "+string(score));
draw_text(40, room_height-50, "Lives: "+string(lives));

if (global.pause)
{
    // Darken out the background
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_rectangle(0, 0, room_width, room_height, 0);
    
    // Reset drawing values as we don't want them to apply to further drawing
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_text(room_width/2 - 38, room_height/2, "PAUSED");
    
    // 
    draw_sprite_ext(sprButtonResume, 0, room_width / 2, room_height - 90, 1, 1, 0, c_white, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
