<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lineStartX = mouse_x;
lineStartY = mouse_y;
lineEndX   = mouse_x;
lineEndY   = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//*****************************************************************************
//
//  Veg Ninja game
//
//*****************************************************************************

// If the game is paused, this stops the rest of the code being executed
if (global.pause)
{
exit;
}

// If we just pressed the left mouse button
if (mouse_check_button_pressed(mb_left))
{
lineEndX = mouse_x;
lineEndY = mouse_y;
}

// If we're holding down the left mouse button
if (mouse_check_button(mb_left))
{
// Create a line using the previous mouse position and the current one
lineStartX = lineEndX;
lineStartY = lineEndY;
lineEndX   = mouse_x;
lineEndY   = mouse_y;
lineLength = point_distance(lineStartX, lineStartY, lineEndX, lineEndY);    // Get the length of the line

    // If the line has some length (meaning it is moving)
if (lineLength &gt; 10)
    {
    // Find out if we hit a vegetable
    var hitVeg = collision_line(lineStartX, lineStartY, lineEndX, lineEndY, objVeg, true, true);
    if (hitVeg != noone)        // If we DID hit a vegetable then hitVeg will be something other than "noone"
        {
        with (hitVeg)
            {
            if (sprite_index == sprTNT)
                {
                alarm[0] = 1;
                }
            else
                {
                instance_destroy();
                score += 1;
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
